service:
  name: serverless-library-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-aws-documentation
  - serverless-dynamodb-local
  - serverless-reqvalidator-plugin
  - serverless-plugin-canary-deployments
  - serverless-s3-local
  - serverless-offline

package:
  individually: true

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Library API
        description: Serverless application for librarian
    models:
      - name: CreateBookRequest
        contentType: application/json
        schema: ${file(models/create-book-request.json)}
      - name: UpdateBookRequest
        contentType: application/json
        schema: ${file(models/update-book-request.json)}
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

  serverless-offline:
    httpPort: 3003

  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
      #noStart: true
    stages:
      - dev

  s3:
    port: 8001
    directory: /tmp

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-west-1'}

  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  tracing:
    lambda: true
    apiGateway: true

  environment:
    BOOKS_TABLE: Books-${self:provider.stage}
    BOOKS_INDEX: LenderIdIndex
    BOOKS_S3_BUCKET: serverless-books-attachements-zuzu-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    JWKS_URL: https://dev-zuzu.eu.auth0.com/.well-known/jwks.json
  
  iamRoleStatements:
    - Effect: "Allow" # xray permissions (required)
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource:
        - "*"
    - Effect: Allow
      Action:
        - codedeploy:*
      Resource:
        - '*'

functions:

  
resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
    
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    BookDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: isbn
            AttributeType: S
          - AttributeName: publishDate
            AttributeType: S
          - AttributeName: lenderId
            AttributeType: S
        KeySchema:
          - AttributeName: isbn
            KeyType: HASH
          - AttributeName: publishDate
            KeyType: RANGE
        BillingMode: "PROVISIONED"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        TableName: ${self:provider.environment.BOOKS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.BOOKS_INDEX}
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
            KeySchema:
            - AttributeName: isbn
              KeyType: HASH
            - AttributeName: lenderId
              KeyType: RANGE
            Projection:
              ProjectionType: ALL

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.BOOKS_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.BOOKS_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket

    BooksSearch:
      Type: AWS::Elasticsearch::Domain
      Properties:
        ElasticsearchVersion: '6.3'
        DomainName: books-search-${self:provider.stage}
        ElasticsearchClusterConfig:
          DedicatedMasterEnabled: false
          InstanceCount: '1'
          ZoneAwarenessEnabled: false
          InstanceType: t2.small.elasticsearch
        EBSOptions:
          EBSEnabled: true
          Iops: 0
          VolumeSize: 10
          VolumeType: 'gp2'

        AccessPolicies:
          Version: '2012-10-17'
          Statement:
            -
              Effect: Allow
              Principal:
                AWS: '*'
              Action: 'es:*'
              Resource: '*'